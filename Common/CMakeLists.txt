CMAKE_MINIMUM_REQUIRED(VERSION 2.8.4)

PROJECT( CIPCommon )

# --------------------------------------------------------------------------
# Include dirs
# --------------------------------------------------------------------------
set(${PROJECT_NAME}_INCLUDE_DIRS 
      ${CIPUtilities_INCLUDE_DIRS} 
      ${CMAKE_CURRENT_BINARY_DIR}
     CACHE INTERNAL "${PROJECT_NAME} include dirs" FORCE)

INCLUDE_DIRECTORIES( ${CIPCommon_INCLUDE_DIRS}  )  

# --------------------------------------------------------------------------
# Configure headers
# --------------------------------------------------------------------------
set(configure_header_file vtkCIPCommonConfigure.h)
configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/${configure_header_file}.in
  ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}
  )

# --------------------------------------------------------------------------
# Install headers
# --------------------------------------------------------------------------
if(NOT DEFINED ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)
  set(${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT ON)
endif()
if(NOT ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)
  file(GLOB headers "${CMAKE_CURRENT_SOURCE_DIR}/*.(h|txx)")
  install(
    FILES ${headers} ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}
    DESTINATION include/${PROJECT_NAME} COMPONENT Development)
endif()

# --------------------------------------------------------------------------
# Sources
# --------------------------------------------------------------------------
SET ( CIPCommon_SRCS
  #cipConnectedAirwayParticlesToHMMAirwayGraphFunctor.cxx  
  cipThinPlateSplineSurface.cxx
  cipLobeSurfaceModel.cxx
  cipChestRegionChestTypeLocations.cxx
  cipSphereStencil.cxx
  cipCylinderStencil.cxx
  cipChestDataViewer.cxx
  itkCIPMergeChestLabelMapsImageFilter.cxx
  cipParticleConnectedComponentFilter.cxx
  cipVesselParticleConnectedComponentFilter.cxx
  cipAirwayParticleConnectedComponentFilter.cxx
  cipFissureParticleConnectedComponentFilter.cxx
  cipLeftLobesThinPlateSplineSurfaceModelToParticlesMetric.cxx
  cipRightLobesThinPlateSplineSurfaceModelToParticlesMetric.cxx
  cipThinPlateSplineSurfaceModelToParticlesMetric.cxx
  cipNelderMeadSimplexOptimizer.cxx
  cipParticleToThinPlateSplineSurfaceMetric.cxx
  cipHelper.cxx
  cipExceptionObject.cxx
  cipChestConventions.cxx
  cipGeometryTopologyData.cxx
  vtkSimpleLungMask.cxx
  vtkImageStatistics.cxx
  vtkComputeAirwayWall.cxx
  vtkImageReformatAlongRay2.cxx
  vtkComputeAirwayWallPolyData.cxx          
  vtkImageResliceWithPlane.cxx
  vtkComputeCentroid.cxx                    
  vtkImageTubularConfidence.cxx
  vtkComputeMonogenicSignal.cxx             
  vtkLungIntensityCorrection.cxx
  vtkEllipseFitting.cxx                     
  vtkMaskBoundingBox.cxx
  vtkExtractAirwayTree.cxx                  
  vtkMultipleReconstructionKernelsPhaseCongruency.cxx
  vtkGeneralizedPhaseCongruency.cxx         
  vtkNRRDExport.cxx
  vtkGeneralizedQuadratureKernelSource.cxx  
  vtkSmoothLines.cxx
  vtkImageKernel.cxx                        
  vtkTubularScalePolyDataFilter.cxx
  vtkImageKernelSource.cxx                  
  vtkTubularScaleSelection.cxx
  vtkImageReformatAlongRay.cxx

  )

IF(CIP_USE_BOOST)
  INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
  SET ( CIPCommon_SRCS 
        ${CIPCommon_SRCS}
        vtkCIPAirwayParticlesToGenerationLabeledAirwayParticlesFilter.cxx
        vtkCIPAirwayParticlesToConnectedAirwayParticlesFilter.cxx
        cipAirwayDataInteractor.cxx
        cipVesselDataInteractor.cxx
        cipFissureDataInteractor.cxx
       )
ENDIF (CIP_USE_BOOST)
       
# --------------------------------------------------------------------------
# Build library
# --------------------------------------------------------------------------
set( LIB_NAME CIPCommon )

add_library(${LIB_NAME} 
  ${CIPCommon_SRCS} 
  )

target_link_libraries(${LIB_NAME}
  ${ITK_LIBRARIES}
  ${VTK_LIBRARIES}
  CIPUtilities
#  ${Teem_LIBRARIES}
  )

# --------------------------------------------------------------------------
# Create separate library for the cipChestConventions. This will enable easy wrapping in python
# --------------------------------------------------------------------------
#add_library( ChestConventions cipChestConventions.cxx )

# Generate the static ChestConventions files
ADD_CUSTOM_COMMAND(
        # With "DEPENDS" option the files will be generated only when ChestConventions.xml changes
        OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/cipChestConventionsXmlAutoGenerated.h
        COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_SOURCE_DIR}/cip_python/common/cipChestConventionsXmlParser.py
              --xml ${CMAKE_SOURCE_DIR}/Resources/ChestConventions.xml
              --in_cxx ${CMAKE_CURRENT_SOURCE_DIR}/cipChestConventionsXmlAutoGenerated.h.template
              --out_cxx ${CMAKE_CURRENT_SOURCE_DIR}/cipChestConventionsXmlAutoGenerated.h
              --in_python ${CMAKE_SOURCE_DIR}/cip_python/common/chest_conventions_static.py.template
              --out_python_source ${CMAKE_SOURCE_DIR}/cip_python/common/chest_conventions_static.py
              --out_python_bin ${CMAKE_BINARY_DIR}/cip_python/common/chest_conventions_static.py
        DEPENDS ${CMAKE_SOURCE_DIR}/Resources/ChestConventions.xml
        DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/cipChestConventionsXmlAutoGenerated.h.template
        COMMENT "Generating static ChestConventions files with ${PYTHON_EXECUTABLE}
                cipChestConventionsXmlAutoGenerated.h will be saved in ${CMAKE_CURRENT_SOURCE_DIR}"
)


ADD_CUSTOM_TARGET(generateChestConventions DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/cipChestConventionsXmlAutoGenerated.h)
ADD_DEPENDENCIES(CIPCommon generateChestConventions)
#ADD_DEPENDENCIES(copy-external-files generateChestConventions)


IF ( CIP_BUILD_TESTING )
 SUBDIRS ( Testing )
ENDIF( CIP_BUILD_TESTING ) 
