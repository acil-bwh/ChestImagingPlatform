import os
import numpy
import platform
from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext


cip_source_dir = '@CIP_SOURCE_DIR@'
cip_library_dir = '@CIP_LIBRARY_DIR@'
cip_python_dir = '@CMAKE_CURRENT_SOURCE_DIR@'

os.environ["CC"] = "/usr/bin/cc"
os.environ["CXX"] = "/usr/bin/c++"
#os.environ["MACOSX_DEPLOYMENT_TARGET"] = "@CMAKE_OSX_DEPLOYMENT_TARGET@"

compile_extra_args = []
link_extra_args = []
if platform.system() == "Windows":
    compile_extra_args = ["/std:c++latest", "/EHsc"]
elif platform.system() == "Darwin":
    compile_extra_args = ['-std=c++11', "-mmacosx-version-min=10.9"]
    link_extra_args = ["-stdlib=libc++", "-mmacosx-version-min=10.9"]

sources = cip_python_dir + '/utils/gco_python/gco_python.pyx'
libraries = ["GraphCutsOptimization"]
library_dirs = cip_source_dir + '/Utilities/GraphCutsOptimization'
runtime_library_dirs = [] # setting it may cause exception on Windows build
include_dirs = cip_source_dir + '/Utilities/GraphCutsOptimization'

files = ['GCoptimization.cpp', 'graph.cpp', 'LinkedBlockList.cpp',
         'maxflow.cpp']
files = [os.path.join(library_dirs, f) for f in files]
files.insert(0, sources)

setup(
        cmdclass = {'build_ext': build_ext},
        ext_modules = [
            Extension("pygco",
                      files,
                      include_dirs=[include_dirs, numpy.get_include()],
                      language="c++",
                      library_dirs=[library_dirs],
                      extra_compile_args=compile_extra_args,
                      extra_link_args=link_extra_args
    )]
)
